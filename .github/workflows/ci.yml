name: Rust CI (Debug)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  LIBTORCH_VERSION: 2.7.1

jobs:
  build:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust with specific version
        uses: dtolnay/rust-toolchain@stable
        with:
          # Try a specific known-good version if stable is problematic
          toolchain: 1.89.0
          components: rustfmt, clippy, rust-src

      - name: Debug Rust environment
        run: |
          rustc --version --verbose
          cargo --version
          rustup show
          rustup component list --installed
          echo "Proc macro support:"
          rustc --print target-list | grep $(rustc -vV | sed -n 's/host: //p')

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-v2
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install system dependencies
        run: |
          brew install wget

      - name: Setup libtorch
        run: |
          cd /tmp
          # Detect architecture and download appropriate libtorch
          ARCH=$(uname -m)
          if [ "$ARCH" = "arm64" ]; then
            LIBTORCH_URL="https://download.pytorch.org/libtorch/cpu/libtorch-macos-arm64-${LIBTORCH_VERSION}.zip"
          else
            LIBTORCH_URL="https://download.pytorch.org/libtorch/cpu/libtorch-macos-x86_64-${LIBTORCH_VERSION}.zip"
          fi
          
          echo "Downloading libtorch for $ARCH from $LIBTORCH_URL"
          wget "$LIBTORCH_URL" -O libtorch.zip
          unzip libtorch.zip
          sudo mv libtorch /usr/local/
          
          echo "LIBTORCH=/usr/local/libtorch" >> $GITHUB_ENV
          echo "DYLD_LIBRARY_PATH=/usr/local/libtorch/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Force clean build
        run: |
          cargo clean
          rm -rf ~/.cargo/registry/cache/
          cargo update

      - name: Try building specific problematic crate first
        run: |
          echo "Attempting to build darling_macro specifically..."
          cargo build -p darling_macro --verbose || echo "darling_macro build failed, continuing..."

      - name: Build with maximum debugging
        run: |
          export RUST_LOG=debug
          export RUST_BACKTRACE=full
          cargo build --verbose
        env:
          LIBTORCH: /usr/local/libtorch
          DYLD_LIBRARY_PATH: /usr/local/libtorch/lib
          LIBTORCH_BYPASS_VERSION_CHECK: 1

      - name: Run tests
        run: cargo test --verbose
        env:
          LIBTORCH: /usr/local/libtorch
          DYLD_LIBRARY_PATH: /usr/local/libtorch/lib
          LIBTORCH_BYPASS_VERSION_CHECK: 1